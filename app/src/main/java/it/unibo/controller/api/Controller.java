package it.unibo.controller.api;

import java.sql.Blob;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import it.unibo.model.entities.Expedition;
import it.unibo.model.entities.Organism;
import it.unibo.model.entities.ROV;
import it.unibo.model.entities.Wreck;
import it.unibo.model.entities.impl.Extraction;
import it.unibo.model.entities.impl.Sighting;

/**
 * This interface models the controller used to make the model communicate with
 * the view and viceversa, following the MVC pattern.
 */
public interface Controller {

    /**
     * Registers a new {@link Operator} in the database.
     * 
     * @param firstName       the first name of the operator
     * @param secondName      the second name of the operator
     * @param fiscalCode      the fiscal code of the operator
     * @param associationName the name of the association the operator works for
     * @param groupID         the ID of the group the operator is part of
     * @param id              the ID of the operator
     * @return true if the operation is successful, false otherwise
     */
    boolean registerOperator(String firstName, String secondName, String fiscalCode, String associationName,
            String groupID,
            String id);

    /**
     * Registers a new {@link ROV} in the database.
     * 
     * @param licensePlate     the ROV's license plate
     * @param manufacturerName the ROV's manufacturer name
     * @param serialNumber     the ROV's serial number given by the manufacturer
     * @param productionDate   the ROV's production date
     * @return true if the operation is successful, false otherwise
     */
    boolean registerROV(String licensePlate, String manufacturerName, String serialNumber, Date productionDate);

    /**
     * Registers a new {@link Expedition} in the database.
     * 
     * @param code            the code of the expedition
     * @param date            the date of the expedition
     * @param locationName    the name of the {@link Location} explored
     * @param rovLicencePlate the license plate of the {@link ROV} used in the
     *                        expedition
     * @param groupID         the ID of the {@link Group} that participated in the
     *                        expedition
     * @param associationName the name of the {@link Association} that organized the
     *                        expedition
     * @return true if the operation is successful, false otherwise
     */
    boolean registerExpedition(String code, Date date, String locationName, String rovLicencePlate, String groupID,
            String associationName);

    /**
     * Registers a new {@link Sighting} in the database.
     * 
     * @param code                    the code of the sighting
     * @param expeditionCode          the code of the expedition
     * @param depth                   the depth at which the sighting occurred
     * @param image                   the image of the sighted object/organism
     * @param notes                   the notes of the sighting
     * @param organismID              the ID of the organism
     * @param wreckID                 the ID of the wreck
     * @param geologicalFormationName the name of the geological formation
     * @return true if the operation is successful, false otherwise
     */
    boolean registerSighting(String code, String expeditionCode, Optional<Integer> depth, Blob image,
            Optional<String> notes, Optional<String> organismID, Optional<String> wreckID,
            Optional<String> geologicalFormationName);

    /**
     * Registers a new {@link Extraction} in the database.
     * Each extraction's number is automatically generated by auto incrementing the
     * value of the previous entry.
     * 
     * @param code           the code of the extraction
     * @param expeditionCode the code of the expedition
     * @param materialName   the name of the material extracted
     * @param depth          the depth at which the extraction occurred
     * @param amount         the amount of material extracted
     * @param notes          the notes of the extraction
     * @return true if the operation is successful, false otherwise
     */
    boolean registerExtraction(String code, String expeditionCode, String materialName, Optional<Integer> depth,
            float amount, Optional<String> notes);

    /**
     * Updates the species of a previously unidentified {@link Organism}.
     * 
     * @param organismID     the ID of the organism to be updated
     * @param updatedSpecies the new species
     * @return true if the operation is successful, false otherwise
     */
    boolean updateSpecies(String organismID, String updatedSpecies);

    /**
     * Filters {@link Sighting}s by depth.
     * 
     * @param minDepth the minimum depth
     * @param maxDepth the maximum depth
     * @return a list of sightings, each represented by a list of its attributes, in
     *         the following order:
     *         <ul>
     *         <li>code of the sighting (String)</li>
     *         <li>code of the expedition (String)</li>
     *         <li>number (int)</li>
     *         <li>depth (int)</li>
     *         <li>image (Blob)</li>
     *         <li>notes (String)</li>
     *         <li>ID of the organism (String)</li>
     *         <li>ID of the wreck (String)</li>
     *         <li>name of the geological formation (String)</li>
     *         </ul>
     */
    List<List<Object>> filterSightingsByDepth(int minDepth, int maxDepth);

    /**
     * Retrieves all the {@link Sighting}s that occurred in a specific
     * {@link Location}.
     * 
     * @param locationName the name of the location
     * @return a list of sightings, each represented by a list of its attributes, in
     *         the following order:
     *         <ul>
     *         <li>code of the sighting (String)</li>
     *         <li>code of the expedition (String)</li>
     *         <li>number (int)</li>
     *         <li>depth (int)</li>
     *         <li>image (Blob)</li>
     *         <li>notes (String)</li>
     *         <li>ID of the organism (String)</li>
     *         <li>ID of the wreck (String)</li>
     *         <li>name of the geological formation (String)</li>
     *         </ul>
     */
    List<List<Object>> filterSightingsByLocation(String locationName);

    /**
     * Retrieves all the {@link Sighting}s that occurred in an {@link Expedition}.
     * 
     * @param expeditionCode the code of the expedition
     * @return a list of sightings, each represented by a list of its attributes, in
     *         the following order:
     *         <ul>
     *         <li>code of the sighting (String)</li>
     *         <li>code of the expedition (String)</li>
     *         <li>number (int)</li>
     *         <li>depth (int)</li>
     *         <li>image (Blob)</li>
     *         <li>notes (String)</li>
     *         <li>ID of the organism (String)</li>
     *         <li>ID of the wreck (String)</li>
     *         <li>name of the geological formation (String)</li>
     *         </ul>
     */
    List<List<Object>> filterSightingsByExpedition(String expeditionCode);

    /**
     * Retrieves all the {@link Sighting}s where an {@link Organism} was observated.
     * 
     * @param organismID the ID of the organism
     * @return a list of sightings, each represented by a list of its attributes, in
     *         the following order:
     *         <ul>
     *         <li>code of the sighting (String)</li>
     *         <li>code of the expedition (String)</li>
     *         <li>number (int)</li>
     *         <li>depth (int)</li>
     *         <li>image (Blob)</li>
     *         <li>notes (String)</li>
     *         <li>ID of the organism (String)</li>
     *         </ul>
     */
    List<List<Object>> filterSightingsByOrganism(String organismID);

    /**
     * Retrieves all the {@link Sighting}s where a {@link Wreck} was observated.
     * 
     * @param organismID the ID of the wreck
     * @return a list of sightings, each represented by a list of its attributes, in
     *         the following order:
     *         <ul>
     *         <li>code of the sighting (String)</li>
     *         <li>code of the expedition (String)</li>
     *         <li>number (int)</li>
     *         <li>depth (int)</li>
     *         <li>image (Blob)</li>
     *         <li>notes (String)</li>
     *         <li>ID of the wreck (String)</li>
     *         </ul>
     */
    List<List<Object>> filterSightingsByWreck(String wreckID);

    /**
     * Retrieves all the {@link Expedition}s organized by an association.
     * 
     * @param associationName the name of the association
     * @return a list of expeditions, each represented by a list of its attributes,
     *         in the following order:
     *         <ul>
     *         <li>code (String)</li>
     *         <li>date (Date)</li>
     *         <li>name of the location (String)</li>
     *         <li>name of the association (String)</li>
     *         <li>ID of the group (String)</li>
     *         </ul>
     */
    List<List<String>> filterExpeditionsByAssociation(String associationName);

    /**
     * Retrieves all the details regarding an {@link Expedition}.
     * 
     * @param expeditionCode the code of the expedition
     * @return a list of the expedition's details, in the following order:
     *         <ul>
     *         <li>code (String)</li>
     *         <li>date (Date)</li>
     *         <li>name of the location (String)</li>
     *         <li>name of the association (String)</li>
     *         <li>ID of the group (String)</li>
     *         <li>operators involved (List of names and IDs)</li>
     *         <li>license plate of the ROV utilized (String)</li>
     *         </ul>
     */
    List<Object> getExpeditionDetails(String expeditionCode);

    /**
     * Retrieves all the {@link Organism}s that were sighted in an
     * {@link Expedition}.
     * 
     * @param expeditionCode the code of the expedition
     * @return a list of the organisms with their attributes, in the following
     *         order:
     *         <ul>
     *         <li>ID (String)</li>
     *         <li>species (String)</li>
     *         <li>temporary name (String)</li>
     *         <li>common name (String)</li>
     *         <li>description (String)</li>
     *         </ul>
     */
    List<List<String>> filterOrganismsByExpedition(String expeditionCode);

    /**
     * Retrieves all the {@link GeologicalFormation}s with a certain danger level
     * and the place they are located in.
     * 
     * @param dangerLevel
     * @return
     */
    List<List<String>> filterGeologicalFormationsByDangerLevel(int dangerLevel);

    /**
     * Retrieves all the locations where a type of wreck was spotted.
     * 
     * @param wreckName
     * @return a list of locations, each represented by a list of its attributes:
     *         its name and the name of thecountry
     */
    List<List<String>> filterLocationsByWreck(String wreckName);

    /**
     * Retrieves all the informations regarding the sightings of an organism.
     * 
     * @param organismID
     * @return
     */
    List<List<Object>> getOrganismInfo(String organismID);

    /**
     * Retrieves all the informations regarding an analysis.
     * 
     * @param analysisCode
     * @return
     */
    List<List<String>> getAnalysisInfo(String analysisCode);

}
